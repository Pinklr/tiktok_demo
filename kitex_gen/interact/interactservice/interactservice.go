// Code generated by Kitex v0.4.4. DO NOT EDIT.

package interactservice

import (
	"context"
	"fmt"
	interact "github.com/Pinklr/tiktok_demo/kitex_gen/interact"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return interactServiceServiceInfo
}

var interactServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "InteractService"
	handlerType := (*interact.InteractService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Favorite":              kitex.NewMethodInfo(favoriteHandler, newFavoriteArgs, newFavoriteResult, false),
		"FavoriteList":          kitex.NewMethodInfo(favoriteListHandler, newFavoriteListArgs, newFavoriteListResult, false),
		"CommentAction":         kitex.NewMethodInfo(commentActionHandler, newCommentActionArgs, newCommentActionResult, false),
		"CommentList":           kitex.NewMethodInfo(commentListHandler, newCommentListArgs, newCommentListResult, false),
		"CountVideoGetFavorite": kitex.NewMethodInfo(countVideoGetFavoriteHandler, newCountVideoGetFavoriteArgs, newCountVideoGetFavoriteResult, false),
		"CountVideoGetComment":  kitex.NewMethodInfo(countVideoGetCommentHandler, newCountVideoGetCommentArgs, newCountVideoGetCommentResult, false),
		"CountUserGetFavorite":  kitex.NewMethodInfo(countUserGetFavoriteHandler, newCountUserGetFavoriteArgs, newCountUserGetFavoriteResult, false),
		"CountUserFavorite":     kitex.NewMethodInfo(countUserFavoriteHandler, newCountUserFavoriteArgs, newCountUserFavoriteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyin.interact",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interact.FavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interact.InteractService).Favorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FavoriteArgs:
		success, err := handler.(interact.InteractService).Favorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newFavoriteArgs() interface{} {
	return &FavoriteArgs{}
}

func newFavoriteResult() interface{} {
	return &FavoriteResult{}
}

type FavoriteArgs struct {
	Req *interact.FavoriteRequest
}

func (p *FavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interact.FavoriteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FavoriteArgs) Unmarshal(in []byte) error {
	msg := new(interact.FavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FavoriteArgs_Req_DEFAULT *interact.FavoriteRequest

func (p *FavoriteArgs) GetReq() *interact.FavoriteRequest {
	if !p.IsSetReq() {
		return FavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type FavoriteResult struct {
	Success *interact.FavoriteResponse
}

var FavoriteResult_Success_DEFAULT *interact.FavoriteResponse

func (p *FavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interact.FavoriteResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FavoriteResult) Unmarshal(in []byte) error {
	msg := new(interact.FavoriteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FavoriteResult) GetSuccess() *interact.FavoriteResponse {
	if !p.IsSetSuccess() {
		return FavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*interact.FavoriteResponse)
}

func (p *FavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interact.FavoriteListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interact.InteractService).FavoriteList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FavoriteListArgs:
		success, err := handler.(interact.InteractService).FavoriteList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FavoriteListResult)
		realResult.Success = success
	}
	return nil
}
func newFavoriteListArgs() interface{} {
	return &FavoriteListArgs{}
}

func newFavoriteListResult() interface{} {
	return &FavoriteListResult{}
}

type FavoriteListArgs struct {
	Req *interact.FavoriteListRequest
}

func (p *FavoriteListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interact.FavoriteListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FavoriteListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FavoriteListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FavoriteListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FavoriteListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FavoriteListArgs) Unmarshal(in []byte) error {
	msg := new(interact.FavoriteListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FavoriteListArgs_Req_DEFAULT *interact.FavoriteListRequest

func (p *FavoriteListArgs) GetReq() *interact.FavoriteListRequest {
	if !p.IsSetReq() {
		return FavoriteListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FavoriteListArgs) IsSetReq() bool {
	return p.Req != nil
}

type FavoriteListResult struct {
	Success *interact.FavoriteListResponse
}

var FavoriteListResult_Success_DEFAULT *interact.FavoriteListResponse

func (p *FavoriteListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interact.FavoriteListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FavoriteListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FavoriteListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FavoriteListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FavoriteListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FavoriteListResult) Unmarshal(in []byte) error {
	msg := new(interact.FavoriteListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FavoriteListResult) GetSuccess() *interact.FavoriteListResponse {
	if !p.IsSetSuccess() {
		return FavoriteListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FavoriteListResult) SetSuccess(x interface{}) {
	p.Success = x.(*interact.FavoriteListResponse)
}

func (p *FavoriteListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interact.CommentActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interact.InteractService).CommentAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CommentActionArgs:
		success, err := handler.(interact.InteractService).CommentAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentActionResult)
		realResult.Success = success
	}
	return nil
}
func newCommentActionArgs() interface{} {
	return &CommentActionArgs{}
}

func newCommentActionResult() interface{} {
	return &CommentActionResult{}
}

type CommentActionArgs struct {
	Req *interact.CommentActionRequest
}

func (p *CommentActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interact.CommentActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CommentActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CommentActionArgs) Unmarshal(in []byte) error {
	msg := new(interact.CommentActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentActionArgs_Req_DEFAULT *interact.CommentActionRequest

func (p *CommentActionArgs) GetReq() *interact.CommentActionRequest {
	if !p.IsSetReq() {
		return CommentActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type CommentActionResult struct {
	Success *interact.CommentActionResponse
}

var CommentActionResult_Success_DEFAULT *interact.CommentActionResponse

func (p *CommentActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interact.CommentActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CommentActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CommentActionResult) Unmarshal(in []byte) error {
	msg := new(interact.CommentActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentActionResult) GetSuccess() *interact.CommentActionResponse {
	if !p.IsSetSuccess() {
		return CommentActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*interact.CommentActionResponse)
}

func (p *CommentActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interact.CommentListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interact.InteractService).CommentList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CommentListArgs:
		success, err := handler.(interact.InteractService).CommentList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentListResult)
		realResult.Success = success
	}
	return nil
}
func newCommentListArgs() interface{} {
	return &CommentListArgs{}
}

func newCommentListResult() interface{} {
	return &CommentListResult{}
}

type CommentListArgs struct {
	Req *interact.CommentListRequest
}

func (p *CommentListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interact.CommentListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CommentListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CommentListArgs) Unmarshal(in []byte) error {
	msg := new(interact.CommentListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentListArgs_Req_DEFAULT *interact.CommentListRequest

func (p *CommentListArgs) GetReq() *interact.CommentListRequest {
	if !p.IsSetReq() {
		return CommentListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

type CommentListResult struct {
	Success *interact.CommentListResponse
}

var CommentListResult_Success_DEFAULT *interact.CommentListResponse

func (p *CommentListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interact.CommentListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CommentListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CommentListResult) Unmarshal(in []byte) error {
	msg := new(interact.CommentListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentListResult) GetSuccess() *interact.CommentListResponse {
	if !p.IsSetSuccess() {
		return CommentListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*interact.CommentListResponse)
}

func (p *CommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func countVideoGetFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interact.CountVideoGetFavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interact.InteractService).CountVideoGetFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CountVideoGetFavoriteArgs:
		success, err := handler.(interact.InteractService).CountVideoGetFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CountVideoGetFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newCountVideoGetFavoriteArgs() interface{} {
	return &CountVideoGetFavoriteArgs{}
}

func newCountVideoGetFavoriteResult() interface{} {
	return &CountVideoGetFavoriteResult{}
}

type CountVideoGetFavoriteArgs struct {
	Req *interact.CountVideoGetFavoriteRequest
}

func (p *CountVideoGetFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interact.CountVideoGetFavoriteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CountVideoGetFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CountVideoGetFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CountVideoGetFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CountVideoGetFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CountVideoGetFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(interact.CountVideoGetFavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CountVideoGetFavoriteArgs_Req_DEFAULT *interact.CountVideoGetFavoriteRequest

func (p *CountVideoGetFavoriteArgs) GetReq() *interact.CountVideoGetFavoriteRequest {
	if !p.IsSetReq() {
		return CountVideoGetFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CountVideoGetFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type CountVideoGetFavoriteResult struct {
	Success *interact.CountResponse
}

var CountVideoGetFavoriteResult_Success_DEFAULT *interact.CountResponse

func (p *CountVideoGetFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interact.CountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CountVideoGetFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CountVideoGetFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CountVideoGetFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CountVideoGetFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CountVideoGetFavoriteResult) Unmarshal(in []byte) error {
	msg := new(interact.CountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CountVideoGetFavoriteResult) GetSuccess() *interact.CountResponse {
	if !p.IsSetSuccess() {
		return CountVideoGetFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CountVideoGetFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*interact.CountResponse)
}

func (p *CountVideoGetFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func countVideoGetCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interact.CountVideoGetCommentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interact.InteractService).CountVideoGetComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CountVideoGetCommentArgs:
		success, err := handler.(interact.InteractService).CountVideoGetComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CountVideoGetCommentResult)
		realResult.Success = success
	}
	return nil
}
func newCountVideoGetCommentArgs() interface{} {
	return &CountVideoGetCommentArgs{}
}

func newCountVideoGetCommentResult() interface{} {
	return &CountVideoGetCommentResult{}
}

type CountVideoGetCommentArgs struct {
	Req *interact.CountVideoGetCommentRequest
}

func (p *CountVideoGetCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interact.CountVideoGetCommentRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CountVideoGetCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CountVideoGetCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CountVideoGetCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CountVideoGetCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CountVideoGetCommentArgs) Unmarshal(in []byte) error {
	msg := new(interact.CountVideoGetCommentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CountVideoGetCommentArgs_Req_DEFAULT *interact.CountVideoGetCommentRequest

func (p *CountVideoGetCommentArgs) GetReq() *interact.CountVideoGetCommentRequest {
	if !p.IsSetReq() {
		return CountVideoGetCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CountVideoGetCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type CountVideoGetCommentResult struct {
	Success *interact.CountResponse
}

var CountVideoGetCommentResult_Success_DEFAULT *interact.CountResponse

func (p *CountVideoGetCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interact.CountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CountVideoGetCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CountVideoGetCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CountVideoGetCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CountVideoGetCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CountVideoGetCommentResult) Unmarshal(in []byte) error {
	msg := new(interact.CountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CountVideoGetCommentResult) GetSuccess() *interact.CountResponse {
	if !p.IsSetSuccess() {
		return CountVideoGetCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CountVideoGetCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*interact.CountResponse)
}

func (p *CountVideoGetCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func countUserGetFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interact.CountUserGetFavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interact.InteractService).CountUserGetFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CountUserGetFavoriteArgs:
		success, err := handler.(interact.InteractService).CountUserGetFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CountUserGetFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newCountUserGetFavoriteArgs() interface{} {
	return &CountUserGetFavoriteArgs{}
}

func newCountUserGetFavoriteResult() interface{} {
	return &CountUserGetFavoriteResult{}
}

type CountUserGetFavoriteArgs struct {
	Req *interact.CountUserGetFavoriteRequest
}

func (p *CountUserGetFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interact.CountUserGetFavoriteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CountUserGetFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CountUserGetFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CountUserGetFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CountUserGetFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CountUserGetFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(interact.CountUserGetFavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CountUserGetFavoriteArgs_Req_DEFAULT *interact.CountUserGetFavoriteRequest

func (p *CountUserGetFavoriteArgs) GetReq() *interact.CountUserGetFavoriteRequest {
	if !p.IsSetReq() {
		return CountUserGetFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CountUserGetFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type CountUserGetFavoriteResult struct {
	Success *interact.CountResponse
}

var CountUserGetFavoriteResult_Success_DEFAULT *interact.CountResponse

func (p *CountUserGetFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interact.CountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CountUserGetFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CountUserGetFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CountUserGetFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CountUserGetFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CountUserGetFavoriteResult) Unmarshal(in []byte) error {
	msg := new(interact.CountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CountUserGetFavoriteResult) GetSuccess() *interact.CountResponse {
	if !p.IsSetSuccess() {
		return CountUserGetFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CountUserGetFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*interact.CountResponse)
}

func (p *CountUserGetFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func countUserFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interact.CountUserFavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interact.InteractService).CountUserFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CountUserFavoriteArgs:
		success, err := handler.(interact.InteractService).CountUserFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CountUserFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newCountUserFavoriteArgs() interface{} {
	return &CountUserFavoriteArgs{}
}

func newCountUserFavoriteResult() interface{} {
	return &CountUserFavoriteResult{}
}

type CountUserFavoriteArgs struct {
	Req *interact.CountUserFavoriteRequest
}

func (p *CountUserFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interact.CountUserFavoriteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CountUserFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CountUserFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CountUserFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CountUserFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CountUserFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(interact.CountUserFavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CountUserFavoriteArgs_Req_DEFAULT *interact.CountUserFavoriteRequest

func (p *CountUserFavoriteArgs) GetReq() *interact.CountUserFavoriteRequest {
	if !p.IsSetReq() {
		return CountUserFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CountUserFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type CountUserFavoriteResult struct {
	Success *interact.CountUserFavoriteRequest
}

var CountUserFavoriteResult_Success_DEFAULT *interact.CountUserFavoriteRequest

func (p *CountUserFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interact.CountUserFavoriteRequest)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CountUserFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CountUserFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CountUserFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CountUserFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CountUserFavoriteResult) Unmarshal(in []byte) error {
	msg := new(interact.CountUserFavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CountUserFavoriteResult) GetSuccess() *interact.CountUserFavoriteRequest {
	if !p.IsSetSuccess() {
		return CountUserFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CountUserFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*interact.CountUserFavoriteRequest)
}

func (p *CountUserFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Favorite(ctx context.Context, Req *interact.FavoriteRequest) (r *interact.FavoriteResponse, err error) {
	var _args FavoriteArgs
	_args.Req = Req
	var _result FavoriteResult
	if err = p.c.Call(ctx, "Favorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, Req *interact.FavoriteListRequest) (r *interact.FavoriteListResponse, err error) {
	var _args FavoriteListArgs
	_args.Req = Req
	var _result FavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentAction(ctx context.Context, Req *interact.CommentActionRequest) (r *interact.CommentActionResponse, err error) {
	var _args CommentActionArgs
	_args.Req = Req
	var _result CommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, Req *interact.CommentListRequest) (r *interact.CommentListResponse, err error) {
	var _args CommentListArgs
	_args.Req = Req
	var _result CommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CountVideoGetFavorite(ctx context.Context, Req *interact.CountVideoGetFavoriteRequest) (r *interact.CountResponse, err error) {
	var _args CountVideoGetFavoriteArgs
	_args.Req = Req
	var _result CountVideoGetFavoriteResult
	if err = p.c.Call(ctx, "CountVideoGetFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CountVideoGetComment(ctx context.Context, Req *interact.CountVideoGetCommentRequest) (r *interact.CountResponse, err error) {
	var _args CountVideoGetCommentArgs
	_args.Req = Req
	var _result CountVideoGetCommentResult
	if err = p.c.Call(ctx, "CountVideoGetComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CountUserGetFavorite(ctx context.Context, Req *interact.CountUserGetFavoriteRequest) (r *interact.CountResponse, err error) {
	var _args CountUserGetFavoriteArgs
	_args.Req = Req
	var _result CountUserGetFavoriteResult
	if err = p.c.Call(ctx, "CountUserGetFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CountUserFavorite(ctx context.Context, Req *interact.CountUserFavoriteRequest) (r *interact.CountUserFavoriteRequest, err error) {
	var _args CountUserFavoriteArgs
	_args.Req = Req
	var _result CountUserFavoriteResult
	if err = p.c.Call(ctx, "CountUserFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
